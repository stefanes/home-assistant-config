#requires custom_templates/electricity_price.jinja
#requires packages/electricity_price.yaml

#region Nord Pool
# docs: https://www.home-assistant.io/integrations/nordpool
# device: [device_id]                                                   <-- TODO: replace all occurrences with your device id
# sensor: sensor.nord_pool_[area]_current_price                         <-- TODO: replace all occurrences with name of your sensor
# config_entry: [config_entry_id]                                       <-- TODO: replace all occurrences with your config entry id
# setup:
#   Electricity price -┬-------------> nord_pool_additional_cost --------┐
#                      |                                                 |
#   Nord Pool ---------┼-[schedule]--> nord_pool_price_api -┬-[schedule]-┴--> nord_pool_price -┬--> nord_pool_price_cheap
#                      |                                    |                                  └--> nord_pool_price_expensive
#                      └------------------------------------┼--> nord_pool_price_api_status
#                                                           └--> nord_pool_price_unavailable
#endregion

input_number:
  # (optional) set to additional cost on top of spot price (excl. VAT)
  # if using Nord Pool as the source sensor for electricity price
  nord_pool_additional_cost:
    name: Nord Pool additional cost
    min: 0.0
    max: 100.0
    step: 0.01
    mode: box
    unit_of_measurement: öre/kWh
    icon: mdi:cash-multiple

template:
  - trigger:
      - trigger: time_pattern
        minutes: 30
        id: "time_pattern"
      - trigger: homeassistant
        event: start
        id: "home_assistant_startup"
      - platform: event
        event_type: call_service
        event_data:
          domain: template
          service: reload
        id: "template_reload"
      - trigger: state
        entity_id: binary_sensor.nord_pool_price_api_status
        to: "on"
        from: "off"
        id: "price_api_status"
    # only trigger on 'time_pattern' after 13 (until we have tomorrow's prices)
    conditions: >
      {{ (trigger.id == 'time_pattern'
          and is_state_attr('binary_sensor.nord_pool_price_api_status', 'tomorrows_prices_available', false)
              and 13 <= now().hour <= 23 )
          or trigger.id != 'time_pattern' }}
    action:
      - action: nordpool.get_prices_for_date
        data:
          config_entry: [config_entry_id]
          date: "{{ now().date() }}"
        response_variable: today_prices
      - action: nordpool.get_prices_for_date
        data:
          config_entry: [config_entry_id]
          date: "{{ now().date() + timedelta(days=1) }}"
        response_variable: tomorrow_prices
    sensor:
      - name: Nord Pool price API
        state: &today_start >
          {{ (today_prices.SE4[0].start | as_datetime(now().min)).isoformat() }}
        device_class: timestamp
        unique_id: nord_pool_price_api
        icon: mdi:api
        availability: >
          {{ today_prices is mapping and today_prices.SE4 | length > 0 }}
        attributes:
          sensor_updated_by: >
            {{ trigger.id | replace('_', ' ') | title }} at {{ now().strftime('%H:%M:%S') }}
          today_start: *today_start
          tomorrow_start: >
            {% if tomorrow_prices is mapping and tomorrow_prices.SE4 | length > 0 %}
              {{ (tomorrow_prices.SE4[0].start | as_datetime(now().min)).isoformat() }}
            {% endif %}
          prices: >
            {{ today_prices.SE4 + tomorrow_prices.SE4 }}

  - trigger:
      - trigger: time_pattern
        minutes: 0
        id: "time_pattern"
      - trigger: state
        entity_id: sensor.nord_pool_price_api
        id: "price_api"
      - trigger: state
        entity_id: sensor.nord_pool_additional_cost
        to:
        id: "additional_cost"
    # only update if 'nord_pool_price_api' is valid
    conditions: >
      {{ is_state('binary_sensor.nord_pool_price_api_status', 'on') }}
    sensor:
      - name: Nord Pool price
        state: >
          {% set prices = state_attr('sensor.nord_pool_price_api', 'prices') %}
          {% from 'electricity_price.jinja' import electricity_price_current %}
          {# returned price is in SEK/MWh, without VAT or added costs #}
          {% set current_price = electricity_price_current(prices,
            __is_nord_pool__ = true) %}
          {{ current_price }}
        unit_of_measurement: SEK/kWh
        state_class: total
        device_class: monetary
        unique_id: nord_pool_price
        icon: mdi:cash-multiple
        availability: >
          {{ has_value('sensor.nord_pool_price_api') }}
        attributes:
          sensor_updated_by: >
            {{ trigger.id | replace('_', ' ') | title }} at {{ now().strftime('%H:%M:%S') }}
          avg_price: >
            {% set prices = state_attr('sensor.nord_pool_price_api', 'prices') %}
            {% from 'electricity_price.jinja' import electricity_price_avg %}
            {% set avg_price = electricity_price_avg(prices,
              __is_nord_pool__ = true) %}
            {{ avg_price }}
          price_percent_to_average: >
            {% set prices = state_attr('sensor.nord_pool_price_api', 'prices') %}
            {% from 'electricity_price.jinja' import electricity_price_current, electricity_price_avg %}
            {% set current_price = electricity_price_current(prices,
              __is_nord_pool__ = true) | float %}
            {% set avg_price = electricity_price_avg(prices,
              __is_nord_pool__ = true) | float %}
            {% set price_percent_to_average = ((current_price / avg_price) * 100) %}
            {{ price_percent_to_average | round(0, default=0) }}
          price_above_average: >
            {% set prices = state_attr('sensor.nord_pool_price_api', 'prices') %}
            {% from 'electricity_price.jinja' import electricity_price_current, electricity_price_avg %}
            {% set current_price = electricity_price_current(prices,
              __is_nord_pool__ = true) | float %}
            {% set avg_price = electricity_price_avg(prices,
              __is_nord_pool__ = true) | float %}
            {{ current_price > avg_price }}
          price_level: >
            {% set prices = state_attr('sensor.nord_pool_price_api', 'prices') %}
            {% from 'electricity_price.jinja' import electricity_price_current, electricity_price_avg %}
            {% set current_price = electricity_price_current(prices,
              __is_nord_pool__ = true) | float %}
            {% set avg_price = electricity_price_avg(prices,
              __is_nord_pool__ = true) | float %}
            {% set price_percent_to_average = ((current_price / avg_price) * 100) %}
            {#
              VERY_CHEAP - The price is smaller or equal to 60 % compared to average price
              CHEAP - The price is greater than 60 % and less or equal to 90 % compared to average price
              NORMAL - The price is greater than 90 % and less than 115 % compared to average price
              EXPENSIVE - The price is greater or equal to 115 % and less than 140 % compared to average price
              VERY_EXPENSIVE - The price is greater or equal to 140 % compared to average price
            #}
            {% if price_percent_to_average <= 60 %}
              VERY_CHEAP
            {% elif price_percent_to_average > 60 and price_percent_to_average <= 90 %}
              CHEAP
            {% elif price_percent_to_average > 90 and price_percent_to_average < 115 %}
              NORMAL
            {% elif price_percent_to_average >= 115 and price_percent_to_average < 140 %}
              EXPENSIVE
            {% elif price_percent_to_average >= 140 %}
              VERY_EXPENSIVE
            {% else %}
              UNKNOWN
            {% endif %}
          today: >
            {% set prices = state_attr('sensor.nord_pool_price_api', 'prices') %}
            {% from 'electricity_price.jinja' import electricity_price_format %}
            {{ electricity_price_format(prices,
              as_list = true,
              __is_nord_pool__ = true) }}
          tomorrow: >
            {% set prices = state_attr('sensor.nord_pool_price_api', 'prices') %}
            {% from 'electricity_price.jinja' import electricity_price_format %}
            {{ electricity_price_format(prices,
              date = now().date() + timedelta(days=1),
              as_list = true,
              __is_nord_pool__ = true) }}
          tomorrow_avg_price: >
            {% set prices = state_attr('sensor.nord_pool_price_api', 'prices') %}
            {% from 'electricity_price.jinja' import electricity_price_avg %}
            {% set avg_price = electricity_price_avg(prices,
              date = now().date() + timedelta(days=1),
              __is_nord_pool__ = true) %}
            {{ avg_price }}
          prices: >
            {% set prices = state_attr('sensor.nord_pool_price_api', 'prices') %}
            {% from 'electricity_price.jinja' import electricity_price_format %}
            {{ electricity_price_format(prices,
              date = none,
              __is_nord_pool__ = true) }}

  - sensor:
      - name: Nord Pool additional cost
        state: >
          {# user defined additional cost #}
          {% set additional_cost = states('input_number.nord_pool_additional_cost') | float * 0.01 %}

          {% if states('input_select.electricity_price_sensor') != 'sensor.nord_pool_price' %}
            {# default to current sensor state #}
            {% set additional_cost = this.state
              if not this is none
                and this.state is defined
                and this.state | is_number
              else additional_cost %}

            {% if has_value('sensor.electricity_price')
              and has_value('sensor.nord_pool_[area]_current_price')
              and (states.sensor.nord_pool_[area]_current_price.last_updated | as_local).hour
                == (states.sensor.electricity_price.last_updated | as_local).hour %}
              {% set vat = 1 + (states('input_number.electricity_price_vat') | int * 0.01) %}
              {% set additional_cost = states('sensor.electricity_price') | float
                - states('sensor.nord_pool_[area]_current_price') | float * vat %}
            {% endif %}
          {% endif %}

          {# output additional cost #}
          {{ additional_cost | round(3, default=0) }}
        unit_of_measurement: SEK/kWh
        state_class: total
        device_class: monetary
        unique_id: nord_pool_additional_cost
        icon: mdi:cash-multiple
        attributes:
          electricity_price_sensor: "{{ states('input_select.electricity_price_sensor') }}"
          electricity_price: "{{ states('sensor.electricity_price') }}"
          electricity_price_last_updated: "{{ states.sensor.electricity_price.last_updated | as_local }}"
          nord_pool_se4_current_price: >
            {% if has_value('sensor.nord_pool_[area]_current_price') %}
              {% set vat = 1 + (states('input_number.electricity_price_vat') | int * 0.01) %}
              {{ (states('sensor.nord_pool_[area]_current_price') | float * vat) | round(3, default=0) }}
            {% endif %}
          nord_pool_se4_current_price_last_updated: "{{ states.sensor.nord_pool_[area]_current_price.last_updated | as_local }}"
          nord_pool_additional_cost: "{{ (states('input_number.nord_pool_additional_cost') | float * 0.01) | round(3, default=0) }}"

  - binary_sensor:
      - name: Nord Pool price API status
        state: &todays_prices_available >
          {% set today_start = (states('sensor.nord_pool_price_api') | as_datetime(now().min) | as_local).date() %}
          {% set tomorrow_start = (state_attr('sensor.nord_pool_price_api', 'tomorrow_start') | as_datetime(now().min) | as_local).date() %}
          {{ today_start == now().date()
              or tomorrow_start == now().date() }}
        device_class: connectivity
        unique_id: nord_pool_price_api_status
        availability: >
          {{ has_value('sensor.nord_pool_price_api') }}
        attributes:
          todays_prices_available: *todays_prices_available
          tomorrows_prices_available: >
            {% set tomorrow_start = (state_attr('sensor.nord_pool_price_api', 'tomorrow_start') | as_datetime(now().min) | as_local).date() %}
            {{ tomorrow_start == now().date() + timedelta(days=1) }}
          nord_pool_price_api_today_start: "{{ state_attr('sensor.nord_pool_price_api', 'today_start') }}"
          nord_pool_price_api_tomorrow_start: "{{ state_attr('sensor.nord_pool_price_api', 'tomorrow_start') }}"

      - name: Nord Pool price cheap
        state: >
          {% set prices = state_attr('sensor.nord_pool_price', 'prices') %}
          {% from 'electricity_price.jinja' import electricity_price_current_is_outlier %}
          {{ electricity_price_current_is_outlier(prices) }}
        device_class: power
        unique_id: nord_pool_price_cheap
        availability: >
          {{ has_value('sensor.nord_pool_price') }}
        attributes:
          today: >
            {% set prices = state_attr('sensor.nord_pool_price', 'prices') %}
            {% from 'electricity_price.jinja' import electricity_price_outliers %}
            {{ electricity_price_outliers(prices) }}
          tomorrow: >
            {% set prices = state_attr('sensor.nord_pool_price', 'prices') %}
            {% from 'electricity_price.jinja' import electricity_price_outliers %}
            {{ electricity_price_outliers(prices,
              date = now().date() + timedelta(days=1)) }}
          electricity_price_threshold: "{{ states('sensor.electricity_price_threshold') }}"
          electricity_price_cheap_hours: "{{ states('sensor.electricity_price_cheap_hours') }}"

      - name: Nord Pool price expensive
        state: >
          {% set prices = state_attr('sensor.nord_pool_price', 'prices') %}
          {% from 'electricity_price.jinja' import electricity_price_current_is_outlier %}
          {{ electricity_price_current_is_outlier(prices,
            cheap = false) }}
        device_class: power
        unique_id: nord_pool_price_expensive
        availability: >
          {{ has_value('sensor.nord_pool_price') }}
        attributes:
          today: >
            {% set prices = state_attr('sensor.nord_pool_price', 'prices') %}
            {% from 'electricity_price.jinja' import electricity_price_outliers %}
            {{ electricity_price_outliers(prices,
              cheap = false) }}
          tomorrow: >
            {% set prices = state_attr('sensor.nord_pool_price', 'prices') %}
            {% from 'electricity_price.jinja' import electricity_price_outliers %}
            {{ electricity_price_outliers(prices,
              cheap = false,
              date = now().date() + timedelta(days=1)) }}
          electricity_price_threshold: "{{ states('sensor.electricity_price_threshold') }}"
          electricity_price_expensive_hours: "{{ states('sensor.electricity_price_expensive_hours') }}"

      - name: Nord Pool unavailable
        state: >
          {{ not (
            has_value('sensor.nord_pool_[area]_current_price')
            and has_value('sensor.nord_pool_price_api')
            and is_state('binary_sensor.nord_pool_price_api_status', 'on')) }}
        delay_on: 0:02:00 # turn on if problem persists for 2 minutes
        device_class: problem
        unique_id: nord_pool_unavailable
        attributes:
          nord_pool_se4_current_price: "{{ states('sensor.nord_pool_[area]_current_price') }}"
          nord_pool_price_api: "{{ states('sensor.nord_pool_price_api') }}"
          nord_pool_price_api_status: "{{ states('binary_sensor.nord_pool_price_api_status') }}"

automation:
  - id: nord_pool_watchdog
    alias: Nord Pool watchdog
    description: ""
    triggers:
      - trigger: state
        entity_id: binary_sensor.nord_pool_unavailable
        to: "on"
        from: "off"
    actions:
      - repeat:
          until:
            - condition: state
              entity_id: binary_sensor.nord_pool_unavailable
              state: "off"
          sequence:
            - action: homeassistant.reload_config_entry
              target:
                device_id:
                  - [device_id]
            - wait_template: >-
                {{ is_state('binary_sensor.nord_pool_unavailable', 'off') }}
              timeout: "00:04:00"
    mode: restart
